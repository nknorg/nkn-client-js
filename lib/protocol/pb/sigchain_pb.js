/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pb.SigAlgo', null, global);
goog.exportSymbol('proto.pb.SigChain', null, global);
goog.exportSymbol('proto.pb.SigChainElem', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.SigChainElem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.SigChainElem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.SigChainElem.displayName = 'proto.pb.SigChainElem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.SigChainElem.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SigChainElem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.SigChainElem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SigChainElem.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    nextPubkey: msg.getNextPubkey_asB64(),
    mining: jspb.Message.getFieldWithDefault(msg, 3, false),
    signature: msg.getSignature_asB64(),
    sigAlgo: jspb.Message.getFieldWithDefault(msg, 5, 0),
    vrf: msg.getVrf_asB64(),
    proof: msg.getProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.SigChainElem}
 */
proto.pb.SigChainElem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SigChainElem;
  return proto.pb.SigChainElem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.SigChainElem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SigChainElem}
 */
proto.pb.SigChainElem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNextPubkey(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMining(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 5:
      var value = /** @type {!proto.pb.SigAlgo} */ (reader.readEnum());
      msg.setSigAlgo(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVrf(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.SigChainElem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SigChainElem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.SigChainElem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SigChainElem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNextPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMining();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSigAlgo();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getVrf_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pb.SigChainElem.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.pb.SigChainElem.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.pb.SigChainElem.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.SigChainElem.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes next_pubkey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.pb.SigChainElem.prototype.getNextPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes next_pubkey = 2;
 * This is a type-conversion wrapper around `getNextPubkey()`
 * @return {string}
 */
proto.pb.SigChainElem.prototype.getNextPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNextPubkey()));
};


/**
 * optional bytes next_pubkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNextPubkey()`
 * @return {!Uint8Array}
 */
proto.pb.SigChainElem.prototype.getNextPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNextPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.SigChainElem.prototype.setNextPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool mining = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.SigChainElem.prototype.getMining = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.pb.SigChainElem.prototype.setMining = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.pb.SigChainElem.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.pb.SigChainElem.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.pb.SigChainElem.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.SigChainElem.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional SigAlgo sig_algo = 5;
 * @return {!proto.pb.SigAlgo}
 */
proto.pb.SigChainElem.prototype.getSigAlgo = function() {
  return /** @type {!proto.pb.SigAlgo} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.pb.SigAlgo} value */
proto.pb.SigChainElem.prototype.setSigAlgo = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional bytes vrf = 6;
 * @return {!(string|Uint8Array)}
 */
proto.pb.SigChainElem.prototype.getVrf = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes vrf = 6;
 * This is a type-conversion wrapper around `getVrf()`
 * @return {string}
 */
proto.pb.SigChainElem.prototype.getVrf_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVrf()));
};


/**
 * optional bytes vrf = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVrf()`
 * @return {!Uint8Array}
 */
proto.pb.SigChainElem.prototype.getVrf_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVrf()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.SigChainElem.prototype.setVrf = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes proof = 7;
 * @return {!(string|Uint8Array)}
 */
proto.pb.SigChainElem.prototype.getProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes proof = 7;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.pb.SigChainElem.prototype.getProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProof()));
};


/**
 * optional bytes proof = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.pb.SigChainElem.prototype.getProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProof()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.SigChainElem.prototype.setProof = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.SigChain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.SigChain.repeatedFields_, null);
};
goog.inherits(proto.pb.SigChain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.SigChain.displayName = 'proto.pb.SigChain';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.SigChain.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.SigChain.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SigChain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.SigChain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SigChain.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dataSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blockHash: msg.getBlockHash_asB64(),
    srcId: msg.getSrcId_asB64(),
    srcPubkey: msg.getSrcPubkey_asB64(),
    destId: msg.getDestId_asB64(),
    destPubkey: msg.getDestPubkey_asB64(),
    elemsList: jspb.Message.toObjectList(msg.getElemsList(),
    proto.pb.SigChainElem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.SigChain}
 */
proto.pb.SigChain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SigChain;
  return proto.pb.SigChain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.SigChain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SigChain}
 */
proto.pb.SigChain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDataSize(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSrcId(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSrcPubkey(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDestId(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDestPubkey(value);
      break;
    case 8:
      var value = new proto.pb.SigChainElem;
      reader.readMessage(value,proto.pb.SigChainElem.deserializeBinaryFromReader);
      msg.addElems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.SigChain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SigChain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.SigChain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SigChain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDataSize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSrcId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSrcPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getDestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getDestPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getElemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.pb.SigChainElem.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 nonce = 1;
 * @return {number}
 */
proto.pb.SigChain.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.SigChain.prototype.setNonce = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 data_size = 2;
 * @return {number}
 */
proto.pb.SigChain.prototype.getDataSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.SigChain.prototype.setDataSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes block_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.pb.SigChain.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes block_hash = 3;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.pb.SigChain.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.pb.SigChain.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.SigChain.prototype.setBlockHash = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes src_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.pb.SigChain.prototype.getSrcId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes src_id = 4;
 * This is a type-conversion wrapper around `getSrcId()`
 * @return {string}
 */
proto.pb.SigChain.prototype.getSrcId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSrcId()));
};


/**
 * optional bytes src_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSrcId()`
 * @return {!Uint8Array}
 */
proto.pb.SigChain.prototype.getSrcId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSrcId()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.SigChain.prototype.setSrcId = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes src_pubkey = 5;
 * @return {!(string|Uint8Array)}
 */
proto.pb.SigChain.prototype.getSrcPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes src_pubkey = 5;
 * This is a type-conversion wrapper around `getSrcPubkey()`
 * @return {string}
 */
proto.pb.SigChain.prototype.getSrcPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSrcPubkey()));
};


/**
 * optional bytes src_pubkey = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSrcPubkey()`
 * @return {!Uint8Array}
 */
proto.pb.SigChain.prototype.getSrcPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSrcPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.SigChain.prototype.setSrcPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes dest_id = 6;
 * @return {!(string|Uint8Array)}
 */
proto.pb.SigChain.prototype.getDestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes dest_id = 6;
 * This is a type-conversion wrapper around `getDestId()`
 * @return {string}
 */
proto.pb.SigChain.prototype.getDestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDestId()));
};


/**
 * optional bytes dest_id = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDestId()`
 * @return {!Uint8Array}
 */
proto.pb.SigChain.prototype.getDestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDestId()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.SigChain.prototype.setDestId = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes dest_pubkey = 7;
 * @return {!(string|Uint8Array)}
 */
proto.pb.SigChain.prototype.getDestPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes dest_pubkey = 7;
 * This is a type-conversion wrapper around `getDestPubkey()`
 * @return {string}
 */
proto.pb.SigChain.prototype.getDestPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDestPubkey()));
};


/**
 * optional bytes dest_pubkey = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDestPubkey()`
 * @return {!Uint8Array}
 */
proto.pb.SigChain.prototype.getDestPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDestPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.SigChain.prototype.setDestPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * repeated SigChainElem elems = 8;
 * @return {!Array<!proto.pb.SigChainElem>}
 */
proto.pb.SigChain.prototype.getElemsList = function() {
  return /** @type{!Array<!proto.pb.SigChainElem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.SigChainElem, 8));
};


/** @param {!Array<!proto.pb.SigChainElem>} value */
proto.pb.SigChain.prototype.setElemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.pb.SigChainElem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.SigChainElem}
 */
proto.pb.SigChain.prototype.addElems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.pb.SigChainElem, opt_index);
};


proto.pb.SigChain.prototype.clearElemsList = function() {
  this.setElemsList([]);
};


/**
 * @enum {number}
 */
proto.pb.SigAlgo = {
  SIGNATURE: 0,
  VRF: 1
};

goog.object.extend(exports, proto.pb);
